runtime! debian.vim

set nocompatible                      " must be first line
set encoding=utf-8
scriptencoding utf-8
set fileformats=unix,mac,dos

syntax on

filetype on                           " enable file type detection

set background=dark

if $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal" || !s:settings.is_win
  set t_Co=256
endif

set termencoding=utf8
if !empty($CONEMUBUILD)
    set term=xterm
    set t_Co=256
    " 256 color mode
    let &t_AB="\e[48;5;%dm"
    let &t_AF="\e[38;5;%dm"
    " set codes for dynamic cursor type with vim modes
    let &t_te="\e[0 q"
    let &t_ti="\e[1 q"
    let &t_EI="\e[1 q"
    let &t_SI="\e[5 q"
    let &t_SR="\e[3 q"
    " fix broken backspaces
    inoremap <Char-0x07F> <BS>
    nnoremap <Char-0x07F> <BS>
    " fix broken scroll wheel
    inoremap <Esc>[62~ <C-X><C-E>
    inoremap <Esc>[63~ <C-X><C-Y>
    nnoremap <Esc>[62~ <C-E>
    nnoremap <Esc>[63~ <C-Y>
endif
silent! colorscheme NeoSolarized

if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

if has("autocmd")
  filetype plugin indent on
endif

"set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
set ignorecase		" Do case insensitive matching
set smartcase		" Do smart case matching
set incsearch		" Incremental search
set hlsearch    " Highlight search terms
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
set mouse=a		" Enable mouse usage (all modes)
set mousehide

if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

" TAB
set tabstop=4
set shiftwidth=4
set expandtab
set smarttab

" INDENT
set ai
set si
set wrap
set cindent

set number
set ruler
set backspace=indent,eol,start          " Backspace for dummies
set linespace=0                         " No extra spaces between rows

map <space> /

" Quit
inoremap <C-Q>     <esc>:q<cr>
nnoremap <C-Q>     :q<cr>
vnoremap <C-Q>     <esc>
nnoremap <Leader>q :q<cr>
nnoremap <Leader>Q :qa!<cr>

" Mapear ctrl+s como w!
command -nargs=0 -bar Update if &modified 
                           \|    if empty(bufname('%'))
                           \|        browse confirm write
                           \|    else
                           \|        confirm write
                           \|    endif
                           \|endif
nnoremap <silent> <C-S> :<C-u>Update<CR> 

" PYTHON

let python_highlight_all = 1
au FileType python syn keyword pythonDecorator True None False self

au BufNewFile,BufRead *.jinja set syntax=htmljinja
au BufNewFile,BufRead *.mako set ft=mako

au FileType python map <buffer> F :set foldmethod=indent<cr>

au FileType python inoremap <buffer> $r return 
au FileType python inoremap <buffer> $i import 
au FileType python inoremap <buffer> $p print 
au FileType python inoremap <buffer> $f #--- <esc>a
au FileType python map <buffer> <leader>1 /class 
au FileType python map <buffer> <leader>2 /def 
au FileType python map <buffer> <leader>C ?class 
au FileType python map <buffer> <leader>D ?def 
au FileType python set cindent
au FileType python set cinkeys-=0#
au FileType python set indentkeys-=0#

" JS

au FileType javascript call JavaScriptFold()
au FileType javascript setl fen
au FileType javascript setl nocindent

au FileType javascript imap <c-t> $log();<esc>hi
au FileType javascript imap <c-a> alert();<esc>hi

au FileType javascript inoremap <buffer> $r return 
au FileType javascript inoremap <buffer> $f //--- PH<esc>FP2xi

function! JavaScriptFold() 
    setl foldmethod=syntax
    setl foldlevelstart=1
    syn region foldBraces start=/{/ end=/}/ transparent fold keepend extend

    function! FoldText()
        return substitute(getline(v:foldstart), '{.*', '{...}', '')
    endfunction
    setl foldtext=FoldText()
endfunction

" Shell

if exists('$TMUX') 
    set term=screen-256color 
endif
